require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const mongoose = require('mongoose');

mongoose.connect(process.env.MONGODB_URI)
  .then(() => console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å–ø–µ—à–Ω–æ'))
  .catch(err => console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', err));

const userSchema = new mongoose.Schema({
  telegramId: { type: Number, required: true, unique: true },
  username: { type: String, default: null },
  name: { type: String, required: true },
  age: { type: Number, required: true },
  workplace: { type: String, required: true },
  citizenship: { type: String, required: true },
  createdAt: { type: Date, default: Date.now }
});

const User = mongoose.model('User', userSchema);

const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: true });

const userStates = new Map();

const STATES = {
  WAITING_FOR_NAME: 'waiting_for_name',
  WAITING_FOR_AGE: 'waiting_for_age',
  WAITING_FOR_WORKPLACE: 'waiting_for_workplace',
  WAITING_FOR_CITIZENSHIP: 'waiting_for_citizenship',
  COMPLETED: 'completed'
};

const MESSAGES = {
  welcome: `üá≥üá¥ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å!

–í—ã –æ–±—Ä–∞—Ç–∏–ª–∏—Å—å –≤ –∫–æ–º–ø–∞–Ω–∏—é ¬´Heads¬ª –ø–æ –Ω–∞–±–æ—Ä—É –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ –≤ –ù–æ—Ä–≤–µ–≥–∏—é! üá≥üá¥

üí∞ –ó–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞ –ø–æ –Ω–∞—à–∏–º –≤–∞–∫–∞–Ω—Å–∏—è–º: 3300-7400‚Ç¨/–º–µ—Å
üè† –ñ–∏–ª—å–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ

–ß—Ç–æ–±—ã –º—ã —Å–º–æ–≥–ª–∏ –≤–∞—Å –¥–µ—Ç–∞–ª—å–Ω–æ –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å, –Ω–∞—á–Ω–µ–º —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã.

–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è:`,
  askAge: 'üìÖ –°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):',
  askWorkplace: 'üíº –£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –ø–æ—Å–ª–µ–¥–Ω–µ–µ/–∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã:',
  askCitizenship: 'üåç –£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ:',
  invalidAge: '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (—á–∏—Å–ª–æ –æ—Ç 16 –¥–æ 65):',
  formCompleted: '‚úÖ –ê–Ω–∫–µ—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –Ω–∞—à–∏–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º.',
  contactManager: 'üìû –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:',
  alreadyRegistered: '‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ!\n\nüë§ –ò–º—è: {name}\nüìÖ –í–æ–∑—Ä–∞—Å—Ç: {age}\nüíº –ú–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã: {workplace}\nüåç –ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ: {citizenship}\nüì± Username: {username}',
  error: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.'
};

bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;

  try {
    const existingUser = await User.findOne({ telegramId: userId });
    
    if (existingUser) {
      const message = MESSAGES.alreadyRegistered
        .replace('{name}', existingUser.name)
        .replace('{username}', existingUser.username ? `@${existingUser.username}` : '–Ω–µ —É–∫–∞–∑–∞–Ω')
        .replace('{age}', existingUser.age)
        .replace('{workplace}', existingUser.workplace)
        .replace('{citizenship}', existingUser.citizenship);
      
      await bot.sendMessage(chatId, message);
      await sendManagerContact(chatId);      
      return;
    }

    userStates.set(userId, { 
      state: STATES.WAITING_FOR_NAME, 
      data: { username: msg.from.username || null } 
    });
    await bot.sendMessage(chatId, MESSAGES.welcome);
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ /start:', error);
    await bot.sendMessage(chatId, MESSAGES.error);
  }
});

bot.on('message', async (msg) => {
  if (msg.text && msg.text.startsWith('/')) return;
  
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const text = msg.text;

  try {
    const userState = userStates.get(userId);
    
    if (!userState) {
      await bot.sendMessage(chatId, 'üëã –ü—Ä–∏–≤–µ—Ç! –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start');
      return;
    }    switch (userState.state) {
      case STATES.WAITING_FOR_NAME:
        await handleNameInput(chatId, userId, text, userState);
        break;
        
      case STATES.WAITING_FOR_AGE:
        await handleAgeInput(chatId, userId, text, userState);
        break;
        
      case STATES.WAITING_FOR_WORKPLACE:
        await handleWorkplaceInput(chatId, userId, text, userState);
        break;
        
      case STATES.WAITING_FOR_CITIZENSHIP:
        await handleCitizenshipInput(chatId, userId, text, userState);
        break;
        
      default:
        await bot.sendMessage(chatId, 'ü§î –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞ —Å –∫–æ–º–∞–Ω–¥—ã /start');
        userStates.delete(userId);
    }
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    await bot.sendMessage(chatId, MESSAGES.error);
  }
});

async function handleNameInput(chatId, userId, text, userState) {
  if (!text || text.trim().length < 2) {
    await bot.sendMessage(chatId, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞):');
    return;
  }

  userState.data.name = text.trim();
  userState.state = STATES.WAITING_FOR_AGE;
  userStates.set(userId, userState);
  
  await bot.sendMessage(chatId, MESSAGES.askAge);
}

async function handleAgeInput(chatId, userId, text, userState) {
  const age = parseInt(text);
  
  if (isNaN(age) || age < 16 || age > 65) {
    await bot.sendMessage(chatId, MESSAGES.invalidAge);
    return;
  }

  userState.data.age = age;
  userState.state = STATES.WAITING_FOR_WORKPLACE;
  userStates.set(userId, userState);
  
  await bot.sendMessage(chatId, MESSAGES.askWorkplace);
}

async function handleWorkplaceInput(chatId, userId, text, userState) {
  if (!text || text.trim().length < 2) {
    await bot.sendMessage(chatId, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –º–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞):');
    return;
  }

  userState.data.workplace = text.trim();
  userState.state = STATES.WAITING_FOR_CITIZENSHIP;
  userStates.set(userId, userState);
  
  await bot.sendMessage(chatId, MESSAGES.askCitizenship);
}

async function handleCitizenshipInput(chatId, userId, text, userState) {
  if (!text || text.trim().length < 2) {
    await bot.sendMessage(chatId, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞):');
    return;
  }

  userState.data.citizenship = text.trim();
    try {
    const newUser = new User({
      telegramId: userId,
      username: userState.data.username,
      name: userState.data.name,
      age: userState.data.age,
      workplace: userState.data.workplace,
      citizenship: userState.data.citizenship
    });
      await newUser.save();
    console.log(`‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${newUser.name}, ${newUser.age} –ª–µ—Ç, ${newUser.workplace}, ${newUser.citizenship}`);
    
    userState.state = STATES.COMPLETED;
    userStates.delete(userId);
    
    await bot.sendMessage(chatId, MESSAGES.formCompleted);
    await sendManagerContact(chatId);
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    await bot.sendMessage(chatId, MESSAGES.error);
  }
}

async function sendManagerContact(chatId) {
  const managerTelegram = process.env.MANAGER_TELEGRAM || '@manager';
  
  const keyboard = {
    inline_keyboard: [[
      {
        text: 'üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É',
        url: `https://t.me/${managerTelegram.replace('@', '')}`
      }
    ]]
  };
  
  await bot.sendMessage(chatId, MESSAGES.contactManager, {
    reply_markup: keyboard,
    parse_mode: 'HTML'
  });
}

bot.on('error', (error) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –±–æ—Ç–∞:', error);
});

bot.on('polling_error', (error) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ polling:', error);
});

console.log('üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');