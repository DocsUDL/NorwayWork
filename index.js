require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const mongoose = require('mongoose');

mongoose.connect(process.env.MONGODB_URI)
  .then(() => console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å–ø–µ—à–Ω–æ'))
  .catch(err => console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', err));

const userSchema = new mongoose.Schema({
  telegramId: { type: Number, required: true, unique: true },
  username: { type: String, default: null },
  city: { type: String, required: true },
  age: { type: Number, required: true },
  createdAt: { type: Date, default: Date.now }
});

const User = mongoose.model('User', userSchema);

const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: true });

const MESSAGES = {
  welcome: `üá≥üá¥ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å !

–í—ã –æ–±—Ä–∞—Ç–∏–ª–∏—Å—å –≤ –∫–æ–º–ø–∞–Ω–∏—é –ø–æ –Ω–∞–±–æ—Ä—É –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ –≤ –ù–æ—Ä–≤–µ–≥–∏—é! üá≥üá¥

–ó–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞ –ø–æ –Ω–∞—à–∏–º –≤–∞–∫–∞–Ω—Å–∏—è–º–∏ 3300-7400‚Ç¨/ –º–µ—Å 

–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É –ø–æ –ø—Ä–∏–º–µ—Ä—É:

<b>1.–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç 
2.–í–∞—à –≥–æ—Ä–æ–¥</b> 
–ü—Ä–∏–º–µ—Ä: <i>–ú–æ—Å–∫–≤–∞, 19</i>`,
  invalidFormat: '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ç–∞–∫: <b>–ì–æ—Ä–æ–¥, –í–æ–∑—Ä–∞—Å—Ç</b>\n–ü—Ä–∏–º–µ—Ä: <i>–õ—å–≤–æ–≤, 25</i>',
  invalidAge: '‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 16 –¥–æ 65 –ª–µ—Ç).',
  alreadyRegistered: '‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n\nüìç –ì–æ—Ä–æ–¥: {city}\nüìÖ –í–æ–∑—Ä–∞—Å—Ç: {age}\nüì± Username: {username}',
  formCompleted: '‚úÖ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.',
  contactManager: 'üìû –î–ª—è —Å–≤—è–∑–∏ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:',
  error: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
};

bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;

  try {
    const existingUser = await User.findOne({ telegramId: userId });
    
    if (existingUser) {
      const message = MESSAGES.alreadyRegistered
        .replace('{city}', existingUser.city)
        .replace('{age}', existingUser.age)
        .replace('{username}', existingUser.username ? `@${existingUser.username}` : '–Ω–µ —É–∫–∞–∑–∞–Ω');
      
      await bot.sendMessage(chatId, message, { parse_mode: 'HTML' });
      await sendManagerContact(chatId);      
      return;
    }

    await bot.sendMessage(chatId, MESSAGES.welcome, { parse_mode: 'HTML' });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ /start:', error);
    await bot.sendMessage(chatId, MESSAGES.error);
  }
});

bot.on('message', async (msg) => {
  if (msg.text && msg.text.startsWith('/')) return;
  
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const text = msg.text;

  try {
    // –ü—Ä–æ–≤–µ—Ä–∏–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ
    const existingUser = await User.findOne({ telegramId: userId });
    if (existingUser) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç: "–ì–æ—Ä–æ–¥, –í–æ–∑—Ä–∞—Å—Ç"
    const parts = text.split(',');
    if (parts.length !== 2) {
      await bot.sendMessage(chatId, MESSAGES.invalidFormat, { parse_mode: 'HTML' });
      return;
    }

    const city = parts[0].trim();
    const age = parseInt(parts[1].trim());

    if (!city || city.length < 2) {
      await bot.sendMessage(chatId, MESSAGES.invalidFormat, { parse_mode: 'HTML' });
      return;
    }

    if (isNaN(age) || age < 16 || age > 65) {
      await bot.sendMessage(chatId, MESSAGES.invalidAge, { parse_mode: 'HTML' });
      return;
    }

    const newUser = new User({
      telegramId: userId,
      username: msg.from.username || null,
      city,
      age
    });

    await newUser.save();
    console.log(`‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${city}, ${age} –ª–µ—Ç`);

    await bot.sendMessage(chatId, MESSAGES.formCompleted, { parse_mode: 'HTML' });
    await sendManagerContact(chatId);

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    await bot.sendMessage(chatId, MESSAGES.error);
  }
});

async function sendManagerContact(chatId) {
  const managerTelegram = process.env.MANAGER_TELEGRAM || '@manager';
  
  const keyboard = {
    inline_keyboard: [[
      {
        text: 'üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É',
        url: `https://t.me/${managerTelegram.replace('@', '')}`
      }
    ]]
  };
  
  await bot.sendMessage(chatId, MESSAGES.contactManager, {
    reply_markup: keyboard,
    parse_mode: 'HTML'
  });
}

bot.on('error', (error) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –±–æ—Ç–∞:', error);
});

bot.on('polling_error', (error) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ polling:', error);
});

console.log('üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');

